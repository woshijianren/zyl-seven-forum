<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seven.forum.dao.zyl.PostInfoDAO">

    <resultMap id="postInfo" type="postInfoEntity">
        <id property="postId" column="post_id"/>
        <result property="userName" column="user_name"/>
        <result property="postTitle" column="post_title"/>
        <result property="postContent" column="post_content"/>
        <result property="userId" column="user_id"/>
        <result property="topPost" column="top_post"/>
        <result property="wonderfulPost" column="wonderful_post"/>
        <result property="createTime" column="create_time"/>
        <result property="replyCount" column="num"/>
    </resultMap>


    <!--帖子访问数+1-->
    <update id="updateVisitCount">
        UPDATE post_info SET visit_count = visit_count + 1
        WHERE post_id = #{param1}
    </update>

    <!--前8个热门帖子：一天内评论最多的,若是不够8个，就查总访问数最多的-->
    <select id="listEightPopularPostInfo" resultType="postInfoEntity">
        SELECT post_id, post_bar_id, post_title,
        post_content, user_id, top_post,
        wonderful_post, audit, visit_count,
        post_status, create_time
        FROM post_info
        WHERE to_days(create_time) = to_days(now())
        ORDER BY visit_count DESC
        LIMIT 8
    </select>

    <select id="listPopularPostInfo" resultType="postInfoEntity">
        SELECT post_id, post_bar_id, post_title,
        post_content, user_id, top_post,
        wonderful_post, audit, visit_count,
        post_status, create_time
        FROM post_info
        WHERE TO_DAYS( NOW( ) ) - TO_DAYS(create_time) >= 1
        ORDER BY visit_count DESC
        LIMIT #{param1}
    </select>

    <!--某个贴吧所有界面的帖子，通过置顶降序,时间升序排序-->
    <select id="listAllPostInfos" resultMap="postInfo">
        select COUNT(*) num,post_info.post_id,post_title, post_content, post_info.user_id, top_post, wonderful_post, user_name, post_info.create_time
        FROM post_info
        LEFT JOIN reply_post_info
        ON post_info.post_id = reply_post_info.post_id
        LEFT JOIN nf_user
        ON nf_user.user_id = post_info.user_id
        WHERE post_status = 1 AND post_info.post_bar_id = #{param1} AND nf_user.status = 1
        GROUP BY post_info.post_id
        ORDER BY top_post DESC, create_time
    </select>

    <select id="countPostInfoByPostBarId" resultType="long">
        SELECT COUNT(*) FROM post_info WHERE post_status = 1 AND post_bar_id = #{param1}
    </select>

    <!--精品贴块的帖子-->
    <select id="listAllWonderfulPost" resultMap="postInfo">
        select COUNT(*) num,post_info.post_id,post_title, post_content, top_post, wonderful_post, user_name, post_info.create_time
        FROM post_info
        LEFT JOIN reply_post_info
        ON post_info.post_id = reply_post_info.post_id
        LEFT JOIN nf_user
        ON nf_user.user_id = post_info.user_id
        WHERE post_status = 1 AND post_info.post_bar_id = #{param1}
        AND nf_user.status = 1 AND wonderful_post = 1
        GROUP BY post_info.post_id
        ORDER BY top_post DESC, create_time
    </select>

    <select id="countWonderfulPostInfoByPostBarId" resultType="long">
        SELECT COUNT(*) FROM post_info WHERE post_status = 1 AND wonderful_post = 1 AND post_bar_id = #{param1}
    </select>

    <!--查询贴吧目录名称和目录id以及贴吧信息-->
    <select id="getCatalogueByPostBarId" resultType="partitionCatalogueEntity">
        SELECT A.catalogue_id, catalogue_name
        FROM partition_catalogue A, post_bar_info B
        WHERE A.catalogue_id = B.catalogue_id
        AND post_bar_id = #{arg0}
    </select>

    <!--查询帖子的标题和作者-->
    <select id="getPostInfoById" resultType="postInfoEntity">
    SELECT post_title, user_id
    FROM post_info
    WHERE post_id = #{arg0}
    </select>

    <!--根据帖子id查询贴吧信息显示在头部-->
    <select id="getPostBarByPostId" resultType="postBarInfoEntity">
        SELECT post_bar_id, post_bar_name, post_count, user_count,post_bar_logo_url
        FROM post_bar_info
        WHERE post_bar_id = (SELECT post_bar_id FROM post_info WHERE post_id = #{arg0})
    </select>

    <resultMap id="listPostsAndCountReply" type="replyPostInfoEntity">
        <id property="replyPostId" column="reply_post_id"/>
        <result property="userId" column="user_id"/>
        <result property="replyPostContent" column="reply_post_content"/>
        <result property="createTime" column="create_time"/>
        <result property="storey" column="storey"/>
        <result property="replyCount" column="num"/>
        <result property="nfUser.userName" column="user_name"/>
        <result property="nfUser.userImgUrl" column="user_img_url"/>
        <result property="nfUser.vipId" column="vip_id"/>
    </resultMap>
    <!--通过帖子id，查出回贴（包括1楼）和回复回帖的数量-->
    <select id="listPostsAndCountReply" resultMap="listPostsAndCountReply">
      select *,@i:=@i+1 storey from
      (select (select COUNT(*) from reply_info where reply_info.reply_post_id = A.reply_post_id and reply_info.reply_status = 1) num,
      A.reply_post_id,A.user_id,A.reply_post_content,A.create_time,
      C.user_name,C.user_img_url,C.vip_id
      from (select *,@i:=0 from reply_post_info) A,reply_info B,nf_user C
      WHERE B.reply_status = 1
        AND A.user_id = C.user_id
        AND A.reply_status = 1
        AND A.post_id=#{param1}
      GROUP BY A.reply_post_id
      ORDER BY A.create_time) D
    </select>

    <!--计算帖子下有多少回帖-->
    <select id="countReplyPosts" resultType="long">
        SELECT COUNT(*) FROM reply_post_info WHERE post_id = #{arg0}
    </select>

    <!--通过帖子id，查询其下的所有回帖的回复-->
    <!--通过帖子id，获取其下所有回帖id，传递给listRepliesInReplyPostByPostId-->
    <select id="listReplyPostIdsByPostId" resultType="long">
        SELECT reply_post_id FROM reply_post_info WHERE post_id=#{arg0}
    </select>

    <resultMap id="replyInfo" type="replyInfoEntity">
        <id property="replyId" column="reply_id"/>
        <result property="replyPostId" column="reply_post_id"/>
        <result property="replyContent" column="reply_content"/>
        <result property="replyTime" column="reply_time"/>
        <result property="replyUserName" column="reply_user_name"/>
        <result property="nfUser.userName" column="user_name"/>
        <result property="nfUser.userImgUrl" column="user_img_url"/>
    </resultMap>

    <select id="listRepliesInReplyPostByPostId" resultMap="replyInfo">
        SELECT C.*, D.user_name reply_user_name FROM
        (SELECT A.reply_id,A.reply_post_id,A.reply_content,A.reply_time,A.user_id,A.reply_user_id,
        B.user_name,B.user_img_url
        FROM reply_info A,nf_user B
        <where>A.reply_post_id IN
            <foreach collection="list" open="(" close=")" item="replyPostId" separator=",">
                #{replyPostId}
            </foreach>
            AND A.user_id = B.user_id AND A.reply_status = 1 AND B.status = 1
        </where>
        ) C LEFT JOIN nf_user D on C.reply_user_id = D.user_id ORDER BY C.reply_time
    </select>

    <!--通过帖子id，查出楼主的回帖和回复回帖的数量-->
    <select id="listJustLandlordPostsAndCountReply" resultMap="listPostsAndCountReply">
        SELECT @i:=@i+1 storey, COUNT(*) num,A.reply_post_id,A.user_id,A.reply_post_content,A.create_time,
        C.user_name,C.user_img_url,C.vip_id
        FROM (select  *,@i:=0 from reply_post_info) A
        LEFT JOIN reply_info B ON A.reply_post_id = B.reply_post_id
        LEFT JOIN nf_user C ON A.user_id = C.user_id
        WHERE A.reply_status = 1 AND C.status = 1 AND A.post_id=#{arg0}
        AND A.user_id = (SELECT user_id FROM post_info WHERE post_id = #{arg0})
        GROUP BY A.reply_post_id
        ORDER BY A.create_time
    </select>

    <!--收藏列表-->
    <select id="listAllCollections" resultType="collectGroup">
      SELECT A.collect_group_id, A.group_name,
      (SELECT COUNT(*) FROM user_collect B WHERE A.collect_group_id = B.collect_group_id) total_num
      FROM collect_group A
      WHERE A.user_id = #{arg0}
    </select>

    <!--查看是否关注贴吧-->
    <select id="isFollowPostBar" resultType="int">
        SELECT 1 FROM user_attention_post_bar
        WHERE user_id = #{param1} AND post_bar_id = #{param2}
        LIMIT 1
    </select>

    <!--是否收藏了帖子-->
    <select id="isCollectPost" resultType="int">
        SELECT 1 FROM user_collect
        WHERE user_id = #{param1} AND collect_obj_id = #{param2}
        LIMIT 1
    </select>

    <!--关注贴吧-->
    <insert id="insertFollowPostBar">
        INSERT user_attention_post_bar(user_id, post_bar_id)
        VALUES (#{param1}, #{param2})
    </insert>

    <!--收藏帖子-->
    <insert id="insertCollectPost">
        <selectKey resultType="long" keyProperty="collectId" order="AFTER">
            SELECT last_insert_id()
        </selectKey>
        INSERT INTO user_collect(user_id, collect_obj_id, collect_group_id)
        VALUES (#{userId}, #{collectObjId}, #{collectGroupId})
    </insert>

    <!--创建收藏夹-->
    <insert id="insertFavorites">
        INSERT INTO collect_group(group_name, user_id, status)
        VALUES (#{groupName}, #{userId}, #{status})
    </insert>

    <!--用户的回复-->
    <insert id="insertReply">
        INSERT INTO reply_info(user_id, reply_user_id, reply_post_id, reply_content, reply_status)
        VALUES (#{userId}, #{replyUserId}, #{replyPostId}, #{replyContent}, 1)
    </insert>

    <!--用户回帖,不置顶，状态正常-->
    <insert id="insertReplyPost">
        INSERT INTO reply_post_info(post_id, user_id, reply_post_content, top_reply_post, reply_status)
        VALUES (#{postId}, #{userId}, #{replyPostContent}, 0, 1)
    </insert>

    <!--用户发帖,首先在帖子表插入数据，然后再在回帖表插入数据-->
    <insert id="insertPost">
        <selectKey resultType="long" order="AFTER" keyProperty="postId">
            select last_insert_id()
        </selectKey>
        INSERT INTO post_info(post_bar_id, post_title, post_content, user_id, top_post, wonderful_post, audit,
        visit_count, post_status)
        VALUES (#{postBarId}, #{postTitle}, #{postContent}, #{userId}, 0, 0, 0, 0, 1)
    </insert>

    <!--在收藏框里取消收藏-->
    <delete id="deleteCollectionInCollections">
        DELETE FROM user_collect WHERE collect_id = #{arg0}
    </delete>

    <delete id="deleteCollectionInPostInfo">
        DELETE FROM user_collect WHERE user_id = #{param1} AND collect_obj_id = #{param2}
    </delete>

    <!--删除收藏夹-->
    <delete id="deleteFavorites">
        DELETE FROM collect_group WHERE collect_group_id = #{arg0}
    </delete>

    <!--删除收藏夹之前先删除其下的所有所藏-->
    <delete id="deleteCollections">
        DELETE FROM user_collect WHERE collect_group_id = #{arg0}
    </delete>

    <!--取消关注贴吧-->
    <delete id="deleteFollowPostBar">
        DELETE FROM user_attention_post_bar
        WHERE user_id = #{param1} AND post_bar_id = #{param2}
    </delete>

    <!--                 帖子界面的删除按钮                 -->

    <!--修改某个回复不可见-->
    <update id="updateReplyStatusByReplyId">
        UPDATE reply_info
        SET reply_status = 0
        WHERE reply_id = #{param1}
    </update>

    <!--修改某个回帖下的回复不可见-->
    <update id="updateReplyStatusByReplyPostId">
        UPDATE reply_info
        SET reply_status = 0
        WHERE reply_post_id = #{param1}
    </update>

    <!--修改整个帖子的所有回复不可见-->
    <update id="updateReplyStatusByPostId">
        UPDATE reply_info
        SET reply_status = 0
        WHERE reply_post_id IN (SELECT reply_post_id FROM reply_post_info WHERE post_id = #{param1})
    </update>
    
    <!--修改某个回帖不可见-->
    <update id="updateReplyPostStatusByReplyPostId">
      UPDATE reply_post_info
      SET reply_status = 0
      WHERE reply_post_id = #{param1}
    </update>

    <!--修改整个帖子下所有回帖不可见-->
    <update id="updateReplyPostStatusByPostId">
        UPDATE reply_post_info
        SET reply_status = 0
        WHERE post_id = #{param1}
    </update>

    <update id="updatePostStatusByPostId">
        UPDATE post_info
        SET post_status = 0
        WHERE post_id = #{param1}
    </update>
    
    <select id="getFirstReplyPostIdByReplyPostId" resultType="long">
        SELECT reply_post_id FROM reply_post_info
        WHERE post_id =
        (SELECT post_id FROM reply_post_info WHERE reply_post_id = #{param1})
        ORDER BY create_time
        LIMIT 1
    </select>

    <!--通过回帖id查出帖子id-->
    <select id="getPostIdByReplyPostId" resultType="long">
        SELECT post_id FROM reply_post_info
        WHERE reply_post_id = #{param1}
    </select>
    
    <!--查询帖子是否存在-->
    <select id="isExistsPost" resultType="int">
        SELECT 1 FROM post_info WHERE post_id = #{param1} AND post_status = 1 LIMIT 1
    </select>
</mapper>